    Code splitting allows you to split your code into various bundles which can then be loaded on demand or in parallel.
    It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly,
    can have a major impact on load time.

    There are three general approaches to code splitting available:
        - Entry Points: Manually split code using entry configuration.
        - Prevent Duplication: Use Entry dependencies or SplitChunksPlugin to dedupe and split chunks.
        - Dynamic Imports: Split code via inline function calls within modules.


    **** Entry Points
        EXAMPLE:
            module.exports = {
                mode: 'development',
                entry: {
                    index: './src/index.js',//first bundle
                    another: './src/another-module.js', //second bundle
                },
                output: {
                    filename: '[name].bundle.js',
                    path: path.resolve(__dirname, 'dist'),
                },
            };


    **** Prevent Duplication
        - The dependOn option allows to share the modules between the chunks:

        EXAMPLE:
            module.exports = {
                mode: 'development',
                entry: {
                    index: {
                        import: './src/index.js',
                        dependOn: 'shared',
                    },
                    another: {
                        import: './src/another-module.js',
                        dependOn: 'shared',
                    },
                    shared: 'lodash',
                },
                output: {
                    filename: '[name].bundle.js',
                    path: path.resolve(__dirname, 'dist'),
                },
                optimization: {
                    runtimeChunk: 'single',
                },
            };

        //or
        - The SplitChunksPlugin allows us to extract common dependencies into an existing entry chunk or an entirely new chunk.
          Let's use this to de-duplicate the lodash dependency from the previous example:

        EXAMPLE:
            module.exports = {
                mode: 'development',
                entry: {
                    index: './src/index.js',
                    another: './src/another-module.js',
                },
                output: {
                    filename: '[name].bundle.js',
                    path: path.resolve(__dirname, 'dist'),
                },
                optimization: {
                    splitChunks: {
                        chunks: 'all',
                    },
                },
            };


    **** Dynamic Imports

        Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and recommended approach
        is to use the import() syntax that conforms to the ECMAScript proposal for dynamic imports. The legacy, webpack-specific approach is
        to use require.ensure. Let's try using the first of these two approaches...

        function getComponent() {
            const element = document.createElement('div');

            return import('lodash')
                .then(({ default: _ }) => {
                    const element = document.createElement('div');
                    element.innerHTML = _.join(['Hello', 'webpack'], ' ');

                    return element;
            })
            .catch((error) => 'An error occurred while loading the component');
        }

        getComponent()
            .then((component) => { document.body.appendChild(component) });


    **** Prefetching
        Definition: resource is probably needed for some navigation in the future.
        Simple prefetch example can be having a HomePage component, which renders a LoginButton component which then
        on demand loads a LoginModal component after being clicked. Webpack will add the prefetch hint once the parent chunk has been loaded.
            
            - A prefetched chunk starts after the parent chunk finishes loading.
            - A prefetched chunk is downloaded while the browser is idle.
            - A prefetched chunk can be used anytime in the future.

        EXAMPLE: 
            import(/* webpackPrefetch: true */ './path/to/LoginModal.js');


    **** Preloading
        Preload directive has a bunch of differences compared to prefetch:
            - A preloaded chunk starts loading in parallel to the parent chunk.
            - A preloaded chunk has medium priority and is instantly downloaded.
            - A preloaded chunk should be instantly requested by the parent chunk.

        Simple preload example can be having a Component which always depends on a big library that should be in a separate chunk.
        
        Let's imagine a component ChartComponent which needs a huge ChartingLibrary. It displays a LoadingIndicator when
        rendered and instantly does an on demand import of ChartingLibrary.

        EXAMPLE:
            import(/* webpackPreload: true */ 'ChartingLibrary');

        When a page which uses the ChartComponent is requested, the charting-library-chunk is also requested via
        <link rel="preload">. Assuming the page-chunk is smaller and finishes faster, the page will be displayed with a
        LoadingIndicator, until the already requested charting-library-chunk finishes.
        This will give a little load time boost since it only needs one round-trip instead of two. Especially in high-latency environments.

        Using webpackPreload incorrectly can actually hurt performance, so be careful when using it.