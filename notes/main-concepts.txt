    - ENTRY POINT
    An entry point indicates which module webpack should use to begin building out its internal dependency graph.
    webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).
    By default its value is ./src/index.js, but you can specify a different (or multiple entry points) by setting an entry
    property in the webpack configuration. For example:

        module.exports = {
          entry: './path/to/my/entry/file.js',
        };

    
    - OUTPUT
    The output property tells webpack where to emit the bundles it creates and how to name these files. It defaults to
    ./dist/main.js for the main output file and to the ./dist folder for any other generated file. You can configure this part of the process by
    specifying an output field in your configuration:
    
        module.exports = {
            output: {
                path: path.resolve(__dirname, 'dist'),
                filename: 'my-first-webpack.bundle.js',
            },
        };


    - LOADERS
    Out of the box, webpack only understands JavaScript and JSON files. Loaders allow webpack to process other types of files and convert them
    into valid modules that can be consumed by your application and added to the dependency graph. At a high level, loaders have two properties in your
    webpack configuration:

    The "test" property identifies which file or files should be transformed.
    The "use" property indicates which loader should be used to do the transforming.

    Example: 
        
        module.exports = {
            module: {
                rules: [{ test: /\.txt$/, use: 'raw-loader' }],
            },
        };

    
    - PLUGUINS
    plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.
        
        module.exports = {
            plugins: [new HtmlWebpackPlugin({ template: './src/index.html' })],
        };
    
    In the example above, the html-webpack-plugin generates an HTML file for your application by injecting automatically all your generated bundles.